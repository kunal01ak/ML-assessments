import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


def k_means_clustering(dataset, num_clusters):
    species = dataset['Species']
    dataset = dataset.drop('Species', axis=1)
    
    X = dataset.values
    
    np.random.seed(0)
    centroids = X[np.random.choice(range(len(X)), num_clusters, replace=False)]
    
    labels = np.zeros(len(X))
    
    while True:
        new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)
        
        if np.array_equal(labels, new_labels):
            break
        
        labels = new_labels
        
        for i in range(num_clusters):
            centroids[i] = np.mean(X[labels == i], axis=0)
    
    return labels, species


def principal_component_analysis(dataset):
    species = dataset['Species']
    dataset = dataset.drop('Species', axis=1)
    
    X = dataset.values
    
    X = (X - np.mean(X, axis=0)) / np.std(X, axis=0)
    
    cov_matrix = np.cov(X.T)
    
    eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)
    
    sorted_indices = np.argsort(eigenvalues)[::-1]
    eigenvalues = eigenvalues[sorted_indices]
    eigenvectors = eigenvectors[:, sorted_indices]
    
    top_eigenvectors = eigenvectors[:, :3]
    
    projected_data = X.dot(top_eigenvectors)
    
    return projected_data, eigenvalues[:3]

# Assuming dataset is a DataFrame containing the Iris dataset

k = 3 
kmeans_labels, species = k_means_clustering(dataset, k)

projected_data, eigenvalues = principal_component_analysis(dataset)

fig, axs = plt.subplots(1, 2, figsize=(12, 6))

axs[0].scatter(projected_data[:, 0], projected_data[:, 1], c=kmeans_labels, cmap='viridis')
axs[0].set_xlabel('Principal Component 1')
axs[0].set_ylabel('Principal Component 2')
axs[0].set_title('K-Means Clustering Output')

species_labels = np.unique(species)
species_colors = ['red', 'green', 'blue']
for label, color in zip(species_labels, species_colors):
    indices = np.where(species == label)
    axs[1].scatter(projected_data[indices, 0], projected_data[indices, 1], color=color, label=label)

axs[1].set_xlabel('Principal Component 1')
axs[1].set_ylabel('Principal Component 2')
axs[1].set_title('Actual Species')
axs[1].legend()

plt.tight_layout()
plt.show()
